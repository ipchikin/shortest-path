package codec

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"encoding/gob"
	"errors"
	"io"

	"github.com/ipchikin/shortest-path/types"
)

func GenerateToken(locations [][2]string, encryptionKey []byte) (string, error) {
	var token string

	// encode the inputs
	var b bytes.Buffer
	e := gob.NewEncoder(&b)
	err := e.Encode(locations)
	if err != nil {
		return token, err
	}

	// encrypt the inputs to generate a token
	// this makes sure the token was generated by the server
	encrypted, err := encrypt(b.Bytes(), encryptionKey)
	if err != nil {
		return token, err
	}

	token = base64.URLEncoding.EncodeToString(encrypted)
	return token, nil
}

func GenerateKey(token string) ([]byte, error) {
	key, err := base64.URLEncoding.DecodeString(token)
	if err != nil {
		return key, err
	}

	return key, nil
}

func GenerateInputs(key []byte, encryptionKey []byte) ([][2]string, error) {
	var locations [][2]string

	// decrypt the key to generate inputs
	decrypted, err := decrypt(key, encryptionKey)
	if err != nil {
		return locations, err
	}

	b := bytes.Buffer{}
	b.Write(decrypted)
	d := gob.NewDecoder(&b)
	err = d.Decode(&locations)
	if err != nil {
		return locations, err
	}

	return locations, nil
}

func DecodeData(val []byte) (types.SuccessResponse, error) {
	var data types.SuccessResponse

	b := bytes.Buffer{}
	b.Write(val)
	d := gob.NewDecoder(&b)
	err := d.Decode(&data)
	if err != nil {
		return data, err
	}
	return data, nil
}

func EncodeData(data types.SuccessResponse) ([]byte, error) {
	var b bytes.Buffer
	e := gob.NewEncoder(&b)
	err := e.Encode(data)
	if err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

func encrypt(plaintext []byte, key []byte) ([]byte, error) {
	c, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	gcm, err := cipher.NewGCM(c)
	if err != nil {
		return nil, err
	}

	nonce := make([]byte, gcm.NonceSize())
	if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
		return nil, err
	}

	return gcm.Seal(nonce, nonce, plaintext, nil), nil
}

func decrypt(ciphertext []byte, key []byte) ([]byte, error) {
	c, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	gcm, err := cipher.NewGCM(c)
	if err != nil {
		return nil, err
	}

	nonceSize := gcm.NonceSize()
	if len(ciphertext) < nonceSize {
		return nil, errors.New("ciphertext too short")
	}

	nonce, ciphertext := ciphertext[:nonceSize], ciphertext[nonceSize:]
	return gcm.Open(nil, nonce, ciphertext, nil)
}
